// bootstrap
@256		 // 0
D=A		 // 1
@SP		 // 2
M=D		 // 3
@RET0001		 // 4
D=A		 // 5
@SP		 // 6
A=M		 // 7
M=D		 // 8
@SP		 // 9
M=M+1		 // 10
@LCL		 // 11
D=M		 // 12
@SP		 // 13
A=M		 // 14
M=D		 // 15
@SP		 // 16
M=M+1		 // 17
@ARG		 // 18
D=M		 // 19
@SP		 // 20
A=M		 // 21
M=D		 // 22
@SP		 // 23
M=M+1		 // 24
@THIS		 // 25
D=M		 // 26
@SP		 // 27
A=M		 // 28
M=D		 // 29
@SP		 // 30
M=M+1		 // 31
@THAT		 // 32
D=M		 // 33
@SP		 // 34
A=M		 // 35
M=D		 // 36
@SP		 // 37
M=M+1		 // 38
@SP		 // 39
D=M		 // 40
@5		 // 41
D=D-A		 // 42
@ARG		 // 43
M=D		 // 44
@SP		 // 45
D=M		 // 46
@LCL		 // 47
M=D		 // 48
@Sys.init		 // 49
0;JMP		 // 50
(RET0001)
// function Main.fibonacci 0
(Main.fibonacci)
@0		 // 51
D=A		 // 52
// push argument 0
@0		 // 53
D=A		 // 54
@ARG		 // 55
A=M+D		 // 56
D=M		 // 57
@SP		 // 58
A=M		 // 59
M=D		 // 60
@SP		 // 61
M=M+1		 // 62
// push constant 2
@2		 // 63
D=A		 // 64
@SP		 // 65
A=M		 // 66
M=D		 // 67
@SP		 // 68
M=M+1		 // 69
// lt
@SP		 // 70
AM=M-1		 // 71
D=M		 // 72
@SP		 // 73
AM=M-1		 // 74
A=M		 // 75
D=A-D		 // 76
@TRUE0002		 // 77
D;JLT		 // 78
D=0		 // 79
@PUSHD0003		 // 80
0;JMP		 // 81
(TRUE0002)
D=-1		 // 82
(PUSHD0003)
@SP		 // 83
A=M		 // 84
M=D		 // 85
@SP		 // 86
M=M+1		 // 87
// if-goto
@SP		 // 88
AM=M-1		 // 89
D=M		 // 90
@IF_TRUE		 // 91
D;JNE		 // 92
// goto
@IF_FALSE		 // 93
0;JMP		 // 94
// label
(IF_TRUE)
// push argument 0
@0		 // 95
D=A		 // 96
@ARG		 // 97
A=M+D		 // 98
D=M		 // 99
@SP		 // 100
A=M		 // 101
M=D		 // 102
@SP		 // 103
M=M+1		 // 104
// return
@LCL		 // 105
D=M		 // 106
@R14		 // 107
M=D		 // 108
@5		 // 109
AD=D-A		 // 110
D=M		 // 111
@R15		 // 112
M=D		 // 113
@SP		 // 114
AM=M-1		 // 115
D=M		 // 116
@ARG		 // 117
A=M		 // 118
M=D		 // 119
@ARG		 // 120
D=M+1		 // 121
@SP		 // 122
M=D		 // 123
@R14		 // 124
AMD=M-1		 // 125
D=M		 // 126
@THAT		 // 127
M=D		 // 128
@R14		 // 129
AMD=M-1		 // 130
D=M		 // 131
@THIS		 // 132
M=D		 // 133
@R14		 // 134
AMD=M-1		 // 135
D=M		 // 136
@ARG		 // 137
M=D		 // 138
@R14		 // 139
AMD=M-1		 // 140
D=M		 // 141
@LCL		 // 142
M=D		 // 143
@R15		 // 144
A=M		 // 145
0;JMP		 // 146
// label
(IF_FALSE)
// push argument 0
@0		 // 147
D=A		 // 148
@ARG		 // 149
A=M+D		 // 150
D=M		 // 151
@SP		 // 152
A=M		 // 153
M=D		 // 154
@SP		 // 155
M=M+1		 // 156
// push constant 2
@2		 // 157
D=A		 // 158
@SP		 // 159
A=M		 // 160
M=D		 // 161
@SP		 // 162
M=M+1		 // 163
// sub
@SP		 // 164
AM=M-1		 // 165
D=M		 // 166
@SP		 // 167
AM=M-1		 // 168
A=M		 // 169
D=A-D		 // 170
@SP		 // 171
A=M		 // 172
M=D		 // 173
@SP		 // 174
M=M+1		 // 175
// call Main.fibonacci 1
@RET0004		 // 176
D=A		 // 177
@SP		 // 178
A=M		 // 179
M=D		 // 180
@SP		 // 181
M=M+1		 // 182
@LCL		 // 183
D=M		 // 184
@SP		 // 185
A=M		 // 186
M=D		 // 187
@SP		 // 188
M=M+1		 // 189
@ARG		 // 190
D=M		 // 191
@SP		 // 192
A=M		 // 193
M=D		 // 194
@SP		 // 195
M=M+1		 // 196
@THIS		 // 197
D=M		 // 198
@SP		 // 199
A=M		 // 200
M=D		 // 201
@SP		 // 202
M=M+1		 // 203
@THAT		 // 204
D=M		 // 205
@SP		 // 206
A=M		 // 207
M=D		 // 208
@SP		 // 209
M=M+1		 // 210
@SP		 // 211
D=M		 // 212
@6		 // 213
D=D-A		 // 214
@ARG		 // 215
M=D		 // 216
@SP		 // 217
D=M		 // 218
@LCL		 // 219
M=D		 // 220
@Main.fibonacci		 // 221
0;JMP		 // 222
(RET0004)
// push argument 0
@0		 // 223
D=A		 // 224
@ARG		 // 225
A=M+D		 // 226
D=M		 // 227
@SP		 // 228
A=M		 // 229
M=D		 // 230
@SP		 // 231
M=M+1		 // 232
// push constant 1
@1		 // 233
D=A		 // 234
@SP		 // 235
A=M		 // 236
M=D		 // 237
@SP		 // 238
M=M+1		 // 239
// sub
@SP		 // 240
AM=M-1		 // 241
D=M		 // 242
@SP		 // 243
AM=M-1		 // 244
A=M		 // 245
D=A-D		 // 246
@SP		 // 247
A=M		 // 248
M=D		 // 249
@SP		 // 250
M=M+1		 // 251
// call Main.fibonacci 1
@RET0005		 // 252
D=A		 // 253
@SP		 // 254
A=M		 // 255
M=D		 // 256
@SP		 // 257
M=M+1		 // 258
@LCL		 // 259
D=M		 // 260
@SP		 // 261
A=M		 // 262
M=D		 // 263
@SP		 // 264
M=M+1		 // 265
@ARG		 // 266
D=M		 // 267
@SP		 // 268
A=M		 // 269
M=D		 // 270
@SP		 // 271
M=M+1		 // 272
@THIS		 // 273
D=M		 // 274
@SP		 // 275
A=M		 // 276
M=D		 // 277
@SP		 // 278
M=M+1		 // 279
@THAT		 // 280
D=M		 // 281
@SP		 // 282
A=M		 // 283
M=D		 // 284
@SP		 // 285
M=M+1		 // 286
@SP		 // 287
D=M		 // 288
@6		 // 289
D=D-A		 // 290
@ARG		 // 291
M=D		 // 292
@SP		 // 293
D=M		 // 294
@LCL		 // 295
M=D		 // 296
@Main.fibonacci		 // 297
0;JMP		 // 298
(RET0005)
// add
@SP		 // 299
AM=M-1		 // 300
D=M		 // 301
@SP		 // 302
AM=M-1		 // 303
A=M		 // 304
D=A+D		 // 305
@SP		 // 306
A=M		 // 307
M=D		 // 308
@SP		 // 309
M=M+1		 // 310
// return
@LCL		 // 311
D=M		 // 312
@R14		 // 313
M=D		 // 314
@5		 // 315
AD=D-A		 // 316
D=M		 // 317
@R15		 // 318
M=D		 // 319
@SP		 // 320
AM=M-1		 // 321
D=M		 // 322
@ARG		 // 323
A=M		 // 324
M=D		 // 325
@ARG		 // 326
D=M+1		 // 327
@SP		 // 328
M=D		 // 329
@R14		 // 330
AMD=M-1		 // 331
D=M		 // 332
@THAT		 // 333
M=D		 // 334
@R14		 // 335
AMD=M-1		 // 336
D=M		 // 337
@THIS		 // 338
M=D		 // 339
@R14		 // 340
AMD=M-1		 // 341
D=M		 // 342
@ARG		 // 343
M=D		 // 344
@R14		 // 345
AMD=M-1		 // 346
D=M		 // 347
@LCL		 // 348
M=D		 // 349
@R15		 // 350
A=M		 // 351
0;JMP		 // 352
// function Sys.init 0
(Sys.init)
@0		 // 353
D=A		 // 354
// push constant 4
@4		 // 355
D=A		 // 356
@SP		 // 357
A=M		 // 358
M=D		 // 359
@SP		 // 360
M=M+1		 // 361
// call Main.fibonacci 1
@RET0006		 // 362
D=A		 // 363
@SP		 // 364
A=M		 // 365
M=D		 // 366
@SP		 // 367
M=M+1		 // 368
@LCL		 // 369
D=M		 // 370
@SP		 // 371
A=M		 // 372
M=D		 // 373
@SP		 // 374
M=M+1		 // 375
@ARG		 // 376
D=M		 // 377
@SP		 // 378
A=M		 // 379
M=D		 // 380
@SP		 // 381
M=M+1		 // 382
@THIS		 // 383
D=M		 // 384
@SP		 // 385
A=M		 // 386
M=D		 // 387
@SP		 // 388
M=M+1		 // 389
@THAT		 // 390
D=M		 // 391
@SP		 // 392
A=M		 // 393
M=D		 // 394
@SP		 // 395
M=M+1		 // 396
@SP		 // 397
D=M		 // 398
@6		 // 399
D=D-A		 // 400
@ARG		 // 401
M=D		 // 402
@SP		 // 403
D=M		 // 404
@LCL		 // 405
M=D		 // 406
@Main.fibonacci		 // 407
0;JMP		 // 408
(RET0006)
// label
(WHILE)
// goto
@WHILE		 // 409
0;JMP		 // 410
